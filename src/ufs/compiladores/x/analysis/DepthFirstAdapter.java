/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.analysis;

import java.util.*;
import ufs.compiladores.x.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPInicioPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramaInicioPrograma(AProgramaInicioPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaInicioPrograma(AProgramaInicioPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaInicioPrograma(AProgramaInicioPrograma node)
    {
        inAProgramaInicioPrograma(node);
        {
            List<PPrograma> copy = new ArrayList<PPrograma>(node.getPrograma());
            for(PPrograma e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramaInicioPrograma(node);
    }

    public void inAVazioInicioPrograma(AVazioInicioPrograma node)
    {
        defaultIn(node);
    }

    public void outAVazioInicioPrograma(AVazioInicioPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioInicioPrograma(AVazioInicioPrograma node)
    {
        inAVazioInicioPrograma(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outAVazioInicioPrograma(node);
    }

    public void inAVazioVazio(AVazioVazio node)
    {
        defaultIn(node);
    }

    public void outAVazioVazio(AVazioVazio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioVazio(AVazioVazio node)
    {
        inAVazioVazio(node);
        outAVazioVazio(node);
    }

    public void inADecVariavelUnicoPrograma(ADecVariavelUnicoPrograma node)
    {
        defaultIn(node);
    }

    public void outADecVariavelUnicoPrograma(ADecVariavelUnicoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVariavelUnicoPrograma(ADecVariavelUnicoPrograma node)
    {
        inADecVariavelUnicoPrograma(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVariavelUnicoPrograma(node);
    }

    public void inADecConstanteUnicoPrograma(ADecConstanteUnicoPrograma node)
    {
        defaultIn(node);
    }

    public void outADecConstanteUnicoPrograma(ADecConstanteUnicoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConstanteUnicoPrograma(ADecConstanteUnicoPrograma node)
    {
        inADecConstanteUnicoPrograma(node);
        if(node.getDecConst() != null)
        {
            node.getDecConst().apply(this);
        }
        outADecConstanteUnicoPrograma(node);
    }

    public void inADecProcedimentoUnicoPrograma(ADecProcedimentoUnicoPrograma node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoUnicoPrograma(ADecProcedimentoUnicoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoUnicoPrograma(ADecProcedimentoUnicoPrograma node)
    {
        inADecProcedimentoUnicoPrograma(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outADecProcedimentoUnicoPrograma(node);
    }

    public void inADecFuncaoUnicoPrograma(ADecFuncaoUnicoPrograma node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoUnicoPrograma(ADecFuncaoUnicoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoUnicoPrograma(ADecFuncaoUnicoPrograma node)
    {
        inADecFuncaoUnicoPrograma(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoUnicoPrograma(node);
    }

    public void inADecVar(ADecVar node)
    {
        defaultIn(node);
    }

    public void outADecVar(ADecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVar(ADecVar node)
    {
        inADecVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getOpcaoVar() != null)
        {
            node.getOpcaoVar().apply(this);
        }
        {
            List<PContOpcaoVar> copy = new ArrayList<PContOpcaoVar>(node.getContOpcaoVar());
            for(PContOpcaoVar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecVar(node);
    }

    public void inADecConst(ADecConst node)
    {
        defaultIn(node);
    }

    public void outADecConst(ADecConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConst(ADecConst node)
    {
        inADecConst(node);
        if(node.getCons() != null)
        {
            node.getCons().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        {
            List<PContInicializacao> copy = new ArrayList<PContInicializacao>(node.getContInicializacao());
            for(PContInicializacao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecConst(node);
    }

    public void inAAtriExpIniInicializacao(AAtriExpIniInicializacao node)
    {
        defaultIn(node);
    }

    public void outAAtriExpIniInicializacao(AAtriExpIniInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtriExpIniInicializacao(AAtriExpIniInicializacao node)
    {
        inAAtriExpIniInicializacao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAtri() != null)
        {
            node.getAtri().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAtriExpIniInicializacao(node);
    }

    public void inAAtriIniArrayExtInicializacao(AAtriIniArrayExtInicializacao node)
    {
        defaultIn(node);
    }

    public void outAAtriIniArrayExtInicializacao(AAtriIniArrayExtInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtriIniArrayExtInicializacao(AAtriIniArrayExtInicializacao node)
    {
        inAAtriIniArrayExtInicializacao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAtri() != null)
        {
            node.getAtri().apply(this);
        }
        if(node.getArrayExt() != null)
        {
            node.getArrayExt().apply(this);
        }
        outAAtriIniArrayExtInicializacao(node);
    }

    public void inAAtriIniArrayCompInicializacao(AAtriIniArrayCompInicializacao node)
    {
        defaultIn(node);
    }

    public void outAAtriIniArrayCompInicializacao(AAtriIniArrayCompInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtriIniArrayCompInicializacao(AAtriIniArrayCompInicializacao node)
    {
        inAAtriIniArrayCompInicializacao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAtri() != null)
        {
            node.getAtri().apply(this);
        }
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        outAAtriIniArrayCompInicializacao(node);
    }

    public void inAContInicializacao(AContInicializacao node)
    {
        defaultIn(node);
    }

    public void outAContInicializacao(AContInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContInicializacao(AContInicializacao node)
    {
        inAContInicializacao(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        outAContInicializacao(node);
    }

    public void inAArrayExt(AArrayExt node)
    {
        defaultIn(node);
    }

    public void outAArrayExt(AArrayExt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExt(AArrayExt node)
    {
        inAArrayExt(node);
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PContExp> copy = new ArrayList<PContExp>(node.getContExp());
            for(PContExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outAArrayExt(node);
    }

    public void inAArrayComp(AArrayComp node)
    {
        defaultIn(node);
    }

    public void outAArrayComp(AArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayComp(AArrayComp node)
    {
        inAArrayComp(node);
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getContArrayComp() != null)
        {
            node.getContArrayComp().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outAArrayComp(node);
    }

    public void inAArrayCompEscolhaContArrayComp(AArrayCompEscolhaContArrayComp node)
    {
        defaultIn(node);
    }

    public void outAArrayCompEscolhaContArrayComp(AArrayCompEscolhaContArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayCompEscolhaContArrayComp(AArrayCompEscolhaContArrayComp node)
    {
        inAArrayCompEscolhaContArrayComp(node);
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        outAArrayCompEscolhaContArrayComp(node);
    }

    public void inAExpEscolhaContArrayComp(AExpEscolhaContArrayComp node)
    {
        defaultIn(node);
    }

    public void outAExpEscolhaContArrayComp(AExpEscolhaContArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpEscolhaContArrayComp(AExpEscolhaContArrayComp node)
    {
        inAExpEscolhaContArrayComp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpEscolhaContArrayComp(node);
    }

    public void inATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        inATipoBaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipo(node);
    }

    public void inATipoCompostoTipo(ATipoCompostoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoCompostoTipo(ATipoCompostoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoCompostoTipo(ATipoCompostoTipo node)
    {
        inATipoCompostoTipo(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outATipoCompostoTipo(node);
    }

    public void inAIntTipoBase(AIntTipoBase node)
    {
        defaultIn(node);
    }

    public void outAIntTipoBase(AIntTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoBase(AIntTipoBase node)
    {
        inAIntTipoBase(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTipoBase(node);
    }

    public void inABoolTipoBase(ABoolTipoBase node)
    {
        defaultIn(node);
    }

    public void outABoolTipoBase(ABoolTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoBase(ABoolTipoBase node)
    {
        inABoolTipoBase(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolTipoBase(node);
    }

    public void inARealTipoBase(ARealTipoBase node)
    {
        defaultIn(node);
    }

    public void outARealTipoBase(ARealTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoBase(ARealTipoBase node)
    {
        inARealTipoBase(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipoBase(node);
    }

    public void inADecProcedimento(ADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outADecProcedimento(ADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimento(ADecProcedimento node)
    {
        inADecProcedimento(node);
        if(node.getProcedure() != null)
        {
            node.getProcedure().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outADecProcedimento(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outADecFuncao(node);
    }

    public void inAParamVazioParametros(AParamVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAParamVazioParametros(AParamVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamVazioParametros(AParamVazioParametros node)
    {
        inAParamVazioParametros(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outAParamVazioParametros(node);
    }

    public void inAParametros(AParametros node)
    {
        defaultIn(node);
    }

    public void outAParametros(AParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametros(AParametros node)
    {
        inAParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getParametroCont() != null)
        {
            node.getParametroCont().apply(this);
        }
        outAParametros(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametro(node);
    }

    public void inATipoBaseParamTipoParametro(ATipoBaseParamTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoBaseParamTipoParametro(ATipoBaseParamTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseParamTipoParametro(ATipoBaseParamTipoParametro node)
    {
        inATipoBaseParamTipoParametro(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseParamTipoParametro(node);
    }

    public void inATipoParamContTipoParametro(ATipoParamContTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoParamContTipoParametro(ATipoParamContTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoParamContTipoParametro(ATipoParamContTipoParametro node)
    {
        inATipoParamContTipoParametro(node);
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outATipoParamContTipoParametro(node);
    }

    public void inAParametroContRecParametroCont(AParametroContRecParametroCont node)
    {
        defaultIn(node);
    }

    public void outAParametroContRecParametroCont(AParametroContRecParametroCont node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroContRecParametroCont(AParametroContRecParametroCont node)
    {
        inAParametroContRecParametroCont(node);
        if(node.getParametroCont() != null)
        {
            node.getParametroCont().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametroContRecParametroCont(node);
    }

    public void inAParametroContVazioParametroCont(AParametroContVazioParametroCont node)
    {
        defaultIn(node);
    }

    public void outAParametroContVazioParametroCont(AParametroContVazioParametroCont node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroContVazioParametroCont(AParametroContVazioParametroCont node)
    {
        inAParametroContVazioParametroCont(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outAParametroContVazioParametroCont(node);
    }

    public void inAIfThenComando(AIfThenComando node)
    {
        defaultIn(node);
    }

    public void outAIfThenComando(AIfThenComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenComando(AIfThenComando node)
    {
        inAIfThenComando(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAIfThenComando(node);
    }

    public void inAIfElseComando(AIfElseComando node)
    {
        defaultIn(node);
    }

    public void outAIfElseComando(AIfElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseComando(AIfElseComando node)
    {
        inAIfElseComando(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getComando2() != null)
        {
            node.getComando2().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAIfElseComando(node);
    }

    public void inAComandoWhileComando(AComandoWhileComando node)
    {
        defaultIn(node);
    }

    public void outAComandoWhileComando(AComandoWhileComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoWhileComando(AComandoWhileComando node)
    {
        inAComandoWhileComando(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoWhileComando(node);
    }

    public void inAComandoVarComando(AComandoVarComando node)
    {
        defaultIn(node);
    }

    public void outAComandoVarComando(AComandoVarComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoVarComando(AComandoVarComando node)
    {
        inAComandoVarComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtri() != null)
        {
            node.getAtri().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoVarComando(node);
    }

    public void inAComandoChamadaComando(AComandoChamadaComando node)
    {
        defaultIn(node);
    }

    public void outAComandoChamadaComando(AComandoChamadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoChamadaComando(AComandoChamadaComando node)
    {
        inAComandoChamadaComando(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoChamadaComando(node);
    }

    public void inAComandoBlocoComando(AComandoBlocoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoBlocoComando(AComandoBlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoBlocoComando(AComandoBlocoComando node)
    {
        inAComandoBlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAComandoBlocoComando(node);
    }

    public void inAIfElse2Comando2(AIfElse2Comando2 node)
    {
        defaultIn(node);
    }

    public void outAIfElse2Comando2(AIfElse2Comando2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElse2Comando2(AIfElse2Comando2 node)
    {
        inAIfElse2Comando2(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getCasoTrue() != null)
        {
            node.getCasoTrue().apply(this);
        }
        if(node.getCasoFalse() != null)
        {
            node.getCasoFalse().apply(this);
        }
        outAIfElse2Comando2(node);
    }

    public void inAComandoWhile2Comando2(AComandoWhile2Comando2 node)
    {
        defaultIn(node);
    }

    public void outAComandoWhile2Comando2(AComandoWhile2Comando2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoWhile2Comando2(AComandoWhile2Comando2 node)
    {
        inAComandoWhile2Comando2(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getComando2() != null)
        {
            node.getComando2().apply(this);
        }
        outAComandoWhile2Comando2(node);
    }

    public void inAComandoVar2Comando2(AComandoVar2Comando2 node)
    {
        defaultIn(node);
    }

    public void outAComandoVar2Comando2(AComandoVar2Comando2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoVar2Comando2(AComandoVar2Comando2 node)
    {
        inAComandoVar2Comando2(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtri() != null)
        {
            node.getAtri().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoVar2Comando2(node);
    }

    public void inAComandoChamada2Comando2(AComandoChamada2Comando2 node)
    {
        defaultIn(node);
    }

    public void outAComandoChamada2Comando2(AComandoChamada2Comando2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoChamada2Comando2(AComandoChamada2Comando2 node)
    {
        inAComandoChamada2Comando2(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoChamada2Comando2(node);
    }

    public void inAComandoBloco2Comando2(AComandoBloco2Comando2 node)
    {
        defaultIn(node);
    }

    public void outAComandoBloco2Comando2(AComandoBloco2Comando2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoBloco2Comando2(AComandoBloco2Comando2 node)
    {
        inAComandoBloco2Comando2(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAComandoBloco2Comando2(node);
    }

    public void inAElseParte2(AElseParte2 node)
    {
        defaultIn(node);
    }

    public void outAElseParte2(AElseParte2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseParte2(AElseParte2 node)
    {
        inAElseParte2(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getComando2() != null)
        {
            node.getComando2().apply(this);
        }
        outAElseParte2(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getChaveE() != null)
        {
            node.getChaveE().apply(this);
        }
        if(node.getContBloco() != null)
        {
            node.getContBloco().apply(this);
        }
        if(node.getChaveD() != null)
        {
            node.getChaveD().apply(this);
        }
        outABloco(node);
    }

    public void inAOpDecVarOpcaoBloco(AOpDecVarOpcaoBloco node)
    {
        defaultIn(node);
    }

    public void outAOpDecVarOpcaoBloco(AOpDecVarOpcaoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpDecVarOpcaoBloco(AOpDecVarOpcaoBloco node)
    {
        inAOpDecVarOpcaoBloco(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outAOpDecVarOpcaoBloco(node);
    }

    public void inAOpDecConstOpcaoBloco(AOpDecConstOpcaoBloco node)
    {
        defaultIn(node);
    }

    public void outAOpDecConstOpcaoBloco(AOpDecConstOpcaoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpDecConstOpcaoBloco(AOpDecConstOpcaoBloco node)
    {
        inAOpDecConstOpcaoBloco(node);
        if(node.getDecConst() != null)
        {
            node.getDecConst().apply(this);
        }
        outAOpDecConstOpcaoBloco(node);
    }

    public void inAOpComandoOpcaoBloco(AOpComandoOpcaoBloco node)
    {
        defaultIn(node);
    }

    public void outAOpComandoOpcaoBloco(AOpComandoOpcaoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpComandoOpcaoBloco(AOpComandoOpcaoBloco node)
    {
        inAOpComandoOpcaoBloco(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAOpComandoOpcaoBloco(node);
    }

    public void inAContBlocoContBloco(AContBlocoContBloco node)
    {
        defaultIn(node);
    }

    public void outAContBlocoContBloco(AContBlocoContBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContBlocoContBloco(AContBlocoContBloco node)
    {
        inAContBlocoContBloco(node);
        {
            List<POpcaoBloco> copy = new ArrayList<POpcaoBloco>(node.getOpcaoBloco());
            for(POpcaoBloco e : copy)
            {
                e.apply(this);
            }
        }
        outAContBlocoContBloco(node);
    }

    public void inABloco2(ABloco2 node)
    {
        defaultIn(node);
    }

    public void outABloco2(ABloco2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco2(ABloco2 node)
    {
        inABloco2(node);
        if(node.getChaveE() != null)
        {
            node.getChaveE().apply(this);
        }
        if(node.getContBloco2() != null)
        {
            node.getContBloco2().apply(this);
        }
        if(node.getChaveD() != null)
        {
            node.getChaveD().apply(this);
        }
        outABloco2(node);
    }

    public void inAOpDecVar2OpcaoBloco2(AOpDecVar2OpcaoBloco2 node)
    {
        defaultIn(node);
    }

    public void outAOpDecVar2OpcaoBloco2(AOpDecVar2OpcaoBloco2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpDecVar2OpcaoBloco2(AOpDecVar2OpcaoBloco2 node)
    {
        inAOpDecVar2OpcaoBloco2(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outAOpDecVar2OpcaoBloco2(node);
    }

    public void inAOpDecConst2OpcaoBloco2(AOpDecConst2OpcaoBloco2 node)
    {
        defaultIn(node);
    }

    public void outAOpDecConst2OpcaoBloco2(AOpDecConst2OpcaoBloco2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpDecConst2OpcaoBloco2(AOpDecConst2OpcaoBloco2 node)
    {
        inAOpDecConst2OpcaoBloco2(node);
        if(node.getDecConst() != null)
        {
            node.getDecConst().apply(this);
        }
        outAOpDecConst2OpcaoBloco2(node);
    }

    public void inAOpComando2OpcaoBloco2(AOpComando2OpcaoBloco2 node)
    {
        defaultIn(node);
    }

    public void outAOpComando2OpcaoBloco2(AOpComando2OpcaoBloco2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpComando2OpcaoBloco2(AOpComando2OpcaoBloco2 node)
    {
        inAOpComando2OpcaoBloco2(node);
        if(node.getComando2() != null)
        {
            node.getComando2().apply(this);
        }
        outAOpComando2OpcaoBloco2(node);
    }

    public void inAContBloco2ContBloco2(AContBloco2ContBloco2 node)
    {
        defaultIn(node);
    }

    public void outAContBloco2ContBloco2(AContBloco2ContBloco2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContBloco2ContBloco2(AContBloco2ContBloco2 node)
    {
        inAContBloco2ContBloco2(node);
        {
            List<POpcaoBloco2> copy = new ArrayList<POpcaoBloco2>(node.getOpcaoBloco2());
            for(POpcaoBloco2 e : copy)
            {
                e.apply(this);
            }
        }
        outAContBloco2ContBloco2(node);
    }

    public void inAIdVariavelVar(AIdVariavelVar node)
    {
        defaultIn(node);
    }

    public void outAIdVariavelVar(AIdVariavelVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVariavelVar(AIdVariavelVar node)
    {
        inAIdVariavelVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVariavelVar(node);
    }

    public void inAComandoVarRecVar(AComandoVarRecVar node)
    {
        defaultIn(node);
    }

    public void outAComandoVarRecVar(AComandoVarRecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoVarRecVar(AComandoVarRecVar node)
    {
        inAComandoVarRecVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outAComandoVarRecVar(node);
    }

    public void inAExpOrExp(AExpOrExp node)
    {
        defaultIn(node);
    }

    public void outAExpOrExp(AExpOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpOrExp(AExpOrExp node)
    {
        inAExpOrExp(node);
        if(node.getExpOr() != null)
        {
            node.getExpOr().apply(this);
        }
        outAExpOrExp(node);
    }

    public void inAIfExpExp(AIfExpExp node)
    {
        defaultIn(node);
    }

    public void outAIfExpExp(AIfExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfExpExp(AIfExpExp node)
    {
        inAIfExpExp(node);
        if(node.getIfExp() != null)
        {
            node.getIfExp().apply(this);
        }
        outAIfExpExp(node);
    }

    public void inABlocoExpExp(ABlocoExpExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExpExp(ABlocoExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpExp(ABlocoExpExp node)
    {
        inABlocoExpExp(node);
        if(node.getBlocoExp() != null)
        {
            node.getBlocoExp().apply(this);
        }
        outABlocoExpExp(node);
    }

    public void inAOperacaoOrExpOr(AOperacaoOrExpOr node)
    {
        defaultIn(node);
    }

    public void outAOperacaoOrExpOr(AOperacaoOrExpOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoOrExpOr(AOperacaoOrExpOr node)
    {
        inAOperacaoOrExpOr(node);
        if(node.getExpOr() != null)
        {
            node.getExpOr().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpAnd() != null)
        {
            node.getExpAnd().apply(this);
        }
        outAOperacaoOrExpOr(node);
    }

    public void inAParaOpAndExpOr(AParaOpAndExpOr node)
    {
        defaultIn(node);
    }

    public void outAParaOpAndExpOr(AParaOpAndExpOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaOpAndExpOr(AParaOpAndExpOr node)
    {
        inAParaOpAndExpOr(node);
        if(node.getExpAnd() != null)
        {
            node.getExpAnd().apply(this);
        }
        outAParaOpAndExpOr(node);
    }

    public void inAOperacaoAndExpAnd(AOperacaoAndExpAnd node)
    {
        defaultIn(node);
    }

    public void outAOperacaoAndExpAnd(AOperacaoAndExpAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoAndExpAnd(AOperacaoAndExpAnd node)
    {
        inAOperacaoAndExpAnd(node);
        if(node.getExpAnd() != null)
        {
            node.getExpAnd().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getOpIgual() != null)
        {
            node.getOpIgual().apply(this);
        }
        outAOperacaoAndExpAnd(node);
    }

    public void inAParaOpIgualExpAnd(AParaOpIgualExpAnd node)
    {
        defaultIn(node);
    }

    public void outAParaOpIgualExpAnd(AParaOpIgualExpAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaOpIgualExpAnd(AParaOpIgualExpAnd node)
    {
        inAParaOpIgualExpAnd(node);
        if(node.getOpIgual() != null)
        {
            node.getOpIgual().apply(this);
        }
        outAParaOpIgualExpAnd(node);
    }

    public void inAOperacaoIgualOpIgual(AOperacaoIgualOpIgual node)
    {
        defaultIn(node);
    }

    public void outAOperacaoIgualOpIgual(AOperacaoIgualOpIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoIgualOpIgual(AOperacaoIgualOpIgual node)
    {
        inAOperacaoIgualOpIgual(node);
        if(node.getOpIgual() != null)
        {
            node.getOpIgual().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getOperacaoMenor() != null)
        {
            node.getOperacaoMenor().apply(this);
        }
        outAOperacaoIgualOpIgual(node);
    }

    public void inAParaOperacaoMenorOpIgual(AParaOperacaoMenorOpIgual node)
    {
        defaultIn(node);
    }

    public void outAParaOperacaoMenorOpIgual(AParaOperacaoMenorOpIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaOperacaoMenorOpIgual(AParaOperacaoMenorOpIgual node)
    {
        inAParaOperacaoMenorOpIgual(node);
        if(node.getOperacaoMenor() != null)
        {
            node.getOperacaoMenor().apply(this);
        }
        outAParaOperacaoMenorOpIgual(node);
    }

    public void inAOperacaoMenorOperacaoMenor(AOperacaoMenorOperacaoMenor node)
    {
        defaultIn(node);
    }

    public void outAOperacaoMenorOperacaoMenor(AOperacaoMenorOperacaoMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoMenorOperacaoMenor(AOperacaoMenorOperacaoMenor node)
    {
        inAOperacaoMenorOperacaoMenor(node);
        if(node.getOperacaoMenor() != null)
        {
            node.getOperacaoMenor().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getOperacaoSomaSub() != null)
        {
            node.getOperacaoSomaSub().apply(this);
        }
        outAOperacaoMenorOperacaoMenor(node);
    }

    public void inAParaOperacaoSomaSubOperacaoMenor(AParaOperacaoSomaSubOperacaoMenor node)
    {
        defaultIn(node);
    }

    public void outAParaOperacaoSomaSubOperacaoMenor(AParaOperacaoSomaSubOperacaoMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaOperacaoSomaSubOperacaoMenor(AParaOperacaoSomaSubOperacaoMenor node)
    {
        inAParaOperacaoSomaSubOperacaoMenor(node);
        if(node.getOperacaoSomaSub() != null)
        {
            node.getOperacaoSomaSub().apply(this);
        }
        outAParaOperacaoSomaSubOperacaoMenor(node);
    }

    public void inAOperacaoSomaOperacaoSomaSub(AOperacaoSomaOperacaoSomaSub node)
    {
        defaultIn(node);
    }

    public void outAOperacaoSomaOperacaoSomaSub(AOperacaoSomaOperacaoSomaSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoSomaOperacaoSomaSub(AOperacaoSomaOperacaoSomaSub node)
    {
        inAOperacaoSomaOperacaoSomaSub(node);
        if(node.getOperacaoSomaSub() != null)
        {
            node.getOperacaoSomaSub().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getOperacaoDivMulMod() != null)
        {
            node.getOperacaoDivMulMod().apply(this);
        }
        outAOperacaoSomaOperacaoSomaSub(node);
    }

    public void inAOperacaoSubtracaoOperacaoSomaSub(AOperacaoSubtracaoOperacaoSomaSub node)
    {
        defaultIn(node);
    }

    public void outAOperacaoSubtracaoOperacaoSomaSub(AOperacaoSubtracaoOperacaoSomaSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoSubtracaoOperacaoSomaSub(AOperacaoSubtracaoOperacaoSomaSub node)
    {
        inAOperacaoSubtracaoOperacaoSomaSub(node);
        if(node.getOperacaoSomaSub() != null)
        {
            node.getOperacaoSomaSub().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getOperacaoDivMulMod() != null)
        {
            node.getOperacaoDivMulMod().apply(this);
        }
        outAOperacaoSubtracaoOperacaoSomaSub(node);
    }

    public void inAParaOperacaoDivMulModOperacaoSomaSub(AParaOperacaoDivMulModOperacaoSomaSub node)
    {
        defaultIn(node);
    }

    public void outAParaOperacaoDivMulModOperacaoSomaSub(AParaOperacaoDivMulModOperacaoSomaSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaOperacaoDivMulModOperacaoSomaSub(AParaOperacaoDivMulModOperacaoSomaSub node)
    {
        inAParaOperacaoDivMulModOperacaoSomaSub(node);
        if(node.getOperacaoDivMulMod() != null)
        {
            node.getOperacaoDivMulMod().apply(this);
        }
        outAParaOperacaoDivMulModOperacaoSomaSub(node);
    }

    public void inAOperacaoDivisaoOperacaoDivMulMod(AOperacaoDivisaoOperacaoDivMulMod node)
    {
        defaultIn(node);
    }

    public void outAOperacaoDivisaoOperacaoDivMulMod(AOperacaoDivisaoOperacaoDivMulMod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoDivisaoOperacaoDivMulMod(AOperacaoDivisaoOperacaoDivMulMod node)
    {
        inAOperacaoDivisaoOperacaoDivMulMod(node);
        if(node.getOperacaoDivMulMod() != null)
        {
            node.getOperacaoDivMulMod().apply(this);
        }
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        if(node.getOperacaoUnaria() != null)
        {
            node.getOperacaoUnaria().apply(this);
        }
        outAOperacaoDivisaoOperacaoDivMulMod(node);
    }

    public void inAOperacaoModuloOperacaoDivMulMod(AOperacaoModuloOperacaoDivMulMod node)
    {
        defaultIn(node);
    }

    public void outAOperacaoModuloOperacaoDivMulMod(AOperacaoModuloOperacaoDivMulMod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoModuloOperacaoDivMulMod(AOperacaoModuloOperacaoDivMulMod node)
    {
        inAOperacaoModuloOperacaoDivMulMod(node);
        if(node.getOperacaoDivMulMod() != null)
        {
            node.getOperacaoDivMulMod().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getOperacaoUnaria() != null)
        {
            node.getOperacaoUnaria().apply(this);
        }
        outAOperacaoModuloOperacaoDivMulMod(node);
    }

    public void inAOperacaoMultiplicacaoOperacaoDivMulMod(AOperacaoMultiplicacaoOperacaoDivMulMod node)
    {
        defaultIn(node);
    }

    public void outAOperacaoMultiplicacaoOperacaoDivMulMod(AOperacaoMultiplicacaoOperacaoDivMulMod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoMultiplicacaoOperacaoDivMulMod(AOperacaoMultiplicacaoOperacaoDivMulMod node)
    {
        inAOperacaoMultiplicacaoOperacaoDivMulMod(node);
        if(node.getOperacaoDivMulMod() != null)
        {
            node.getOperacaoDivMulMod().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getOperacaoUnaria() != null)
        {
            node.getOperacaoUnaria().apply(this);
        }
        outAOperacaoMultiplicacaoOperacaoDivMulMod(node);
    }

    public void inAParaOperacaoUnariaOperacaoDivMulMod(AParaOperacaoUnariaOperacaoDivMulMod node)
    {
        defaultIn(node);
    }

    public void outAParaOperacaoUnariaOperacaoDivMulMod(AParaOperacaoUnariaOperacaoDivMulMod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaOperacaoUnariaOperacaoDivMulMod(AParaOperacaoUnariaOperacaoDivMulMod node)
    {
        inAParaOperacaoUnariaOperacaoDivMulMod(node);
        if(node.getOperacaoUnaria() != null)
        {
            node.getOperacaoUnaria().apply(this);
        }
        outAParaOperacaoUnariaOperacaoDivMulMod(node);
    }

    public void inAOperacaoNegOperacaoUnaria(AOperacaoNegOperacaoUnaria node)
    {
        defaultIn(node);
    }

    public void outAOperacaoNegOperacaoUnaria(AOperacaoNegOperacaoUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoNegOperacaoUnaria(AOperacaoNegOperacaoUnaria node)
    {
        inAOperacaoNegOperacaoUnaria(node);
        if(node.getNeg() != null)
        {
            node.getNeg().apply(this);
        }
        if(node.getOperacaoUnaria() != null)
        {
            node.getOperacaoUnaria().apply(this);
        }
        outAOperacaoNegOperacaoUnaria(node);
    }

    public void inAOperacaoMenosUnariaOperacaoUnaria(AOperacaoMenosUnariaOperacaoUnaria node)
    {
        defaultIn(node);
    }

    public void outAOperacaoMenosUnariaOperacaoUnaria(AOperacaoMenosUnariaOperacaoUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoMenosUnariaOperacaoUnaria(AOperacaoMenosUnariaOperacaoUnaria node)
    {
        inAOperacaoMenosUnariaOperacaoUnaria(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getOperacaoUnaria() != null)
        {
            node.getOperacaoUnaria().apply(this);
        }
        outAOperacaoMenosUnariaOperacaoUnaria(node);
    }

    public void inAParaInicioRecExpOperacaoUnaria(AParaInicioRecExpOperacaoUnaria node)
    {
        defaultIn(node);
    }

    public void outAParaInicioRecExpOperacaoUnaria(AParaInicioRecExpOperacaoUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaInicioRecExpOperacaoUnaria(AParaInicioRecExpOperacaoUnaria node)
    {
        inAParaInicioRecExpOperacaoUnaria(node);
        if(node.getRecExp() != null)
        {
            node.getRecExp().apply(this);
        }
        outAParaInicioRecExpOperacaoUnaria(node);
    }

    public void inARecExpParentesesRecExp(ARecExpParentesesRecExp node)
    {
        defaultIn(node);
    }

    public void outARecExpParentesesRecExp(ARecExpParentesesRecExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecExpParentesesRecExp(ARecExpParentesesRecExp node)
    {
        inARecExpParentesesRecExp(node);
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        outARecExpParentesesRecExp(node);
    }

    public void inAExpNumeroInteiroRecExp(AExpNumeroInteiroRecExp node)
    {
        defaultIn(node);
    }

    public void outAExpNumeroInteiroRecExp(AExpNumeroInteiroRecExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNumeroInteiroRecExp(AExpNumeroInteiroRecExp node)
    {
        inAExpNumeroInteiroRecExp(node);
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        outAExpNumeroInteiroRecExp(node);
    }

    public void inANumeroRealRecExp(ANumeroRealRecExp node)
    {
        defaultIn(node);
    }

    public void outANumeroRealRecExp(ANumeroRealRecExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroRealRecExp(ANumeroRealRecExp node)
    {
        inANumeroRealRecExp(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outANumeroRealRecExp(node);
    }

    public void inATrueRecExp(ATrueRecExp node)
    {
        defaultIn(node);
    }

    public void outATrueRecExp(ATrueRecExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueRecExp(ATrueRecExp node)
    {
        inATrueRecExp(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueRecExp(node);
    }

    public void inAFalseRecExp(AFalseRecExp node)
    {
        defaultIn(node);
    }

    public void outAFalseRecExp(AFalseRecExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseRecExp(AFalseRecExp node)
    {
        inAFalseRecExp(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseRecExp(node);
    }

    public void inAChamadaRecExp(AChamadaRecExp node)
    {
        defaultIn(node);
    }

    public void outAChamadaRecExp(AChamadaRecExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaRecExp(AChamadaRecExp node)
    {
        inAChamadaRecExp(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaRecExp(node);
    }

    public void inAVariavelRecExp(AVariavelRecExp node)
    {
        defaultIn(node);
    }

    public void outAVariavelRecExp(AVariavelRecExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelRecExp(AVariavelRecExp node)
    {
        inAVariavelRecExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariavelRecExp(node);
    }

    public void inAContExp(AContExp node)
    {
        defaultIn(node);
    }

    public void outAContExp(AContExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContExp(AContExp node)
    {
        inAContExp(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAContExp(node);
    }

    public void inABlocoExp(ABlocoExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExp(ABlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExp(ABlocoExp node)
    {
        inABlocoExp(node);
        if(node.getChaveE() != null)
        {
            node.getChaveE().apply(this);
        }
        {
            List<PDecConst> copy = new ArrayList<PDecConst>(node.getDecConst());
            for(PDecConst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getChaveD() != null)
        {
            node.getChaveD().apply(this);
        }
        outABlocoExp(node);
    }

    public void inAIfExp(AIfExp node)
    {
        defaultIn(node);
    }

    public void outAIfExp(AIfExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfExp(AIfExp node)
    {
        inAIfExp(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        if(node.getThenParte() != null)
        {
            node.getThenParte().apply(this);
        }
        if(node.getElseParte() != null)
        {
            node.getElseParte().apply(this);
        }
        outAIfExp(node);
    }

    public void inAThenParte(AThenParte node)
    {
        defaultIn(node);
    }

    public void outAThenParte(AThenParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThenParte(AThenParte node)
    {
        inAThenParte(node);
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAThenParte(node);
    }

    public void inAElseParte(AElseParte node)
    {
        defaultIn(node);
    }

    public void outAElseParte(AElseParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseParte(AElseParte node)
    {
        inAElseParte(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAElseParte(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        outAChamada(node);
    }

    public void inAListVazioListaExp(AListVazioListaExp node)
    {
        defaultIn(node);
    }

    public void outAListVazioListaExp(AListVazioListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVazioListaExp(AListVazioListaExp node)
    {
        inAListVazioListaExp(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outAListVazioListaExp(node);
    }

    public void inAListaExpListaExp(AListaExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpListaExp(AListaExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        inAListaExpListaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PContExp> copy = new ArrayList<PContExp>(node.getContExp());
            for(PContExp e : copy)
            {
                e.apply(this);
            }
        }
        outAListaExpListaExp(node);
    }

    public void inAIdOpcaoVar(AIdOpcaoVar node)
    {
        defaultIn(node);
    }

    public void outAIdOpcaoVar(AIdOpcaoVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdOpcaoVar(AIdOpcaoVar node)
    {
        inAIdOpcaoVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdOpcaoVar(node);
    }

    public void inAInicializacaoOpcaoVar(AInicializacaoOpcaoVar node)
    {
        defaultIn(node);
    }

    public void outAInicializacaoOpcaoVar(AInicializacaoOpcaoVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicializacaoOpcaoVar(AInicializacaoOpcaoVar node)
    {
        inAInicializacaoOpcaoVar(node);
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        outAInicializacaoOpcaoVar(node);
    }

    public void inAContOpcaoVar(AContOpcaoVar node)
    {
        defaultIn(node);
    }

    public void outAContOpcaoVar(AContOpcaoVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContOpcaoVar(AContOpcaoVar node)
    {
        inAContOpcaoVar(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getOpcaoVar() != null)
        {
            node.getOpcaoVar().apply(this);
        }
        outAContOpcaoVar(node);
    }
}
