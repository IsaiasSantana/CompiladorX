/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.analysis;

import java.util.*;
import ufs.compiladores.x.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInicioPrograma(AInicioPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVariavelRecPrograma(ADecVariavelRecPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVariavelUnicoPrograma(ADecVariavelUnicoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConstanteRecPrograma(ADecConstanteRecPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConstanteUnicoPrograma(ADecConstanteUnicoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecProcedimentoRecPrograma(ADecProcedimentoRecPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecProcedimentoUnicoPrograma(ADecProcedimentoUnicoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFuncaoRecPrograma(ADecFuncaoRecPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFuncaoUnicoPrograma(ADecFuncaoUnicoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVar(ADecVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConst(ADecConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInicializacao(AInicializacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContInicializacao(AContInicializacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayExt(AArrayExt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayComp(AArrayComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayCompEscolhaContArrayComp(AArrayCompEscolhaContArrayComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpEscolhaContArrayComp(AExpEscolhaContArrayComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoCompostoTipo(ATipoCompostoTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntTipoBase(AIntTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolTipoBase(ABoolTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealTipoBase(ARealTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecProcedimento(ADecProcedimento node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametros(AParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoBaseParamTipoParametro(ATipoBaseParamTipoParametro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoParamContTipoParametro(ATipoParamContTipoParametro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametroCont(AParametroCont node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoIfComando(AComandoIfComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoWhileComando(AComandoWhileComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoVarComando(AComandoVarComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoChamadaComando(AComandoChamadaComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoBlocoComando(AComandoBlocoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfSemElseComandosIf(AIfSemElseComandosIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfComElseComandosIf(AIfComElseComandosIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfComElse(AIfComElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfComElse2(AIfComElse2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoComElse(AComandoComElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpDecVarOpcaoBloco(AOpDecVarOpcaoBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpDecConstOpcaoBloco(AOpDecConstOpcaoBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpComandoOpcaoBloco(AOpComandoOpcaoBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContBlocoContBloco(AContBlocoContBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABaseContBlocoContBloco(ABaseContBlocoContBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdVariavelVar(AIdVariavelVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoVarRecVar(AComandoVarRecVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpOrExp(AExpOrExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfExpExp(AIfExpExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoExpExp(ABlocoExpExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoOrExpOr(AOperacaoOrExpOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaOpAndExpOr(AParaOpAndExpOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoAndExpAnd(AOperacaoAndExpAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaOpIgualExpAnd(AParaOpIgualExpAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoIgualOpIgual(AOperacaoIgualOpIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaOperacaoMenorOpIgual(AParaOperacaoMenorOpIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoMenorOperacaoMenor(AOperacaoMenorOperacaoMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaOperacaoSomaSubOperacaoMenor(AParaOperacaoSomaSubOperacaoMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoSomaOperacaoSomaSub(AOperacaoSomaOperacaoSomaSub node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoSubtracaoOperacaoSomaSub(AOperacaoSubtracaoOperacaoSomaSub node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaOperacaoDivMulModOperacaoSomaSub(AParaOperacaoDivMulModOperacaoSomaSub node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoDivisaoOperacaoDivMulMod(AOperacaoDivisaoOperacaoDivMulMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoModuloOperacaoDivMulMod(AOperacaoModuloOperacaoDivMulMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoMultiplicacaoOperacaoDivMulMod(AOperacaoMultiplicacaoOperacaoDivMulMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaOperacaoUnariaOperacaoDivMulMod(AParaOperacaoUnariaOperacaoDivMulMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoNegOperacaoUnaria(AOperacaoNegOperacaoUnaria node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpercaoMenosUnariaOperacaoUnaria(AOpercaoMenosUnariaOperacaoUnaria node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaInicioRecExpOperacaoUnaria(AParaInicioRecExpOperacaoUnaria node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARecExpParentesesRecExp(ARecExpParentesesRecExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpNumeroInteiroRecExp(AExpNumeroInteiroRecExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumeroRealRecExp(ANumeroRealRecExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueRecExp(ATrueRecExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseRecExp(AFalseRecExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamadaRecExp(AChamadaRecExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariavelRecExp(AVariavelRecExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContExp(AContExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoExp(ABlocoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfExp(AIfExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThenParte(AThenParte node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseParte(AElseParte node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioListaExp(AVazioListaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdOpcaoVar(AIdOpcaoVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInicializacaoOpcaoVar(AInicializacaoOpcaoVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContOpcaoVar(AContOpcaoVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProcedure(TProcedure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCons(TCons node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtri(TAtri node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivisao(TDivisao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMais(TMais node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgual(TIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeg(TNeg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPipe(TPipe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteE(TColcheteE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteD(TColcheteD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChaveE(TChaveE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChaveD(TChaveD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParE(TParE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParD(TParD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoVirgula(TPontoVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaco(TEspaco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentLinha(TComentLinha node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentBloco(TComentBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumeroInteiro(TNumeroInteiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumeroReal(TNumeroReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
