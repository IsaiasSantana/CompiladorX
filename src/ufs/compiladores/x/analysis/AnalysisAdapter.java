/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.analysis;

import java.util.*;
import ufs.compiladores.x.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramaInicioPrograma(AProgramaInicioPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioInicioPrograma(AVazioInicioPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioVazio(AVazioVazio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVariavelUnicoPrograma(ADecVariavelUnicoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConstanteUnicoPrograma(ADecConstanteUnicoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecProcedimentoUnicoPrograma(ADecProcedimentoUnicoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFuncaoUnicoPrograma(ADecFuncaoUnicoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVar(ADecVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConst(ADecConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtriExpIniInicializacao(AAtriExpIniInicializacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtriIniArrayExtInicializacao(AAtriIniArrayExtInicializacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtriIniArrayCompInicializacao(AAtriIniArrayCompInicializacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContInicializacao(AContInicializacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayExt(AArrayExt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayComp(AArrayComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayCompEscolhaContArrayComp(AArrayCompEscolhaContArrayComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpEscolhaContArrayComp(AExpEscolhaContArrayComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoCompostoTipo(ATipoCompostoTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntTipoBase(AIntTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolTipoBase(ABoolTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealTipoBase(ARealTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecProcedimento(ADecProcedimento node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamVazioParametros(AParamVazioParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaParametrosParametros(AListaParametrosParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoBaseParamTipoParametro(ATipoBaseParamTipoParametro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoParamContTipoParametro(ATipoParamContTipoParametro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametroContRecParametroCont(AParametroContRecParametroCont node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametroContVazioParametroCont(AParametroContVazioParametroCont node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfThenComando(AIfThenComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseComando(AIfElseComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoWhileComando(AComandoWhileComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoVarComando(AComandoVarComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoChamadaComando(AComandoChamadaComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoBlocoComando(AComandoBlocoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElse2Comando2(AIfElse2Comando2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoWhile2Comando2(AComandoWhile2Comando2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoVar2Comando2(AComandoVar2Comando2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoChamada2Comando2(AComandoChamada2Comando2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoBloco2Comando2(AComandoBloco2Comando2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseParte2(AElseParte2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpDecVarOpcaoBloco(AOpDecVarOpcaoBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpDecConstOpcaoBloco(AOpDecConstOpcaoBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpComandoOpcaoBloco(AOpComandoOpcaoBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContBlocoContBloco(AContBlocoContBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdVariavelVariavel(AIdVariavelVariavel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoVarRecVariavel(AComandoVarRecVariavel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoOrExp(AOperacaoOrExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoAndExp(AOperacaoAndExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoIgualExp(AOperacaoIgualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoMenorExp(AOperacaoMenorExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoSomaExp(AOperacaoSomaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoSubtracaoExp(AOperacaoSubtracaoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoDivisaoExp(AOperacaoDivisaoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoModuloExp(AOperacaoModuloExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoMultiplicacaoExp(AOperacaoMultiplicacaoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoNegExp(AOperacaoNegExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperacaoMenosUnariaExp(AOperacaoMenosUnariaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpNumeroInteiroExp(AExpNumeroInteiroExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumeroRealExp(ANumeroRealExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueExp(ATrueExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseExp(AFalseExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamadaExp(AChamadaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariavelExp(AVariavelExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseExpExp(AIfElseExpExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoExpExp(ABlocoExpExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARecExpParentesesExp(ARecExpParentesesExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThenParte(AThenParte node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseParte(AElseParte node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContExp(AContExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaVaziaListaExp(AListaVaziaListaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdOpcaoVar(AIdOpcaoVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInicializacaoOpcaoVar(AInicializacaoOpcaoVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContOpcaoVar(AContOpcaoVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProcedure(TProcedure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCons(TCons node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtri(TAtri node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivisao(TDivisao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMais(TMais node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgual(TIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeg(TNeg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPipe(TPipe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteE(TColcheteE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteD(TColcheteD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChaveE(TChaveE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChaveD(TChaveD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParE(TParE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParD(TParD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoVirgula(TPontoVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaco(TEspaco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentLinha(TComentLinha node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentBloco(TComentBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumeroInteiro(TNumeroInteiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumeroReal(TNumeroReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
