/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.parser;

import ufs.compiladores.x.lexer.*;
import ufs.compiladores.x.node.*;
import ufs.compiladores.x.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PInicioPrograma node1 = (PInicioPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AInicioPrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ADecVariavelRecPrograma */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ADecVariavelUnicoPrograma */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ADecConstanteRecPrograma */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ADecConstanteUnicoPrograma */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce ADecProcedimentoRecPrograma */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce ADecProcedimentoUnicoPrograma */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce ADecFuncaoRecPrograma */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce ADecFuncaoUnicoPrograma */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AAdecvar1DecVar */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce AAdecvar2DecVar */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce AAdecconst1DecConst */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce AAdecconst2DecConst */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list, false);
            }
            break;
            case 13: /* reduce AInicializacao */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce AContInicializacao */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AAarrayext1ArrayExt */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AAarrayext2ArrayExt */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce AArrayComp */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce AArrayCompEscolhaContArrayComp */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AExpEscolhaContArrayComp */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce ATipoCompostoTipo */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list, false);
            }
            break;
            case 22: /* reduce AIntTipoBase */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce ABoolTipoBase */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce ARealTipoBase */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list, false);
            }
            break;
            case 25: /* reduce ADecProcedimento */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce ADecFuncao */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AVazioParametros */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce AAparametros1Parametros */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce AAparametros2Parametros */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce AAparametro1Parametro */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AAparametro2Parametro */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce ATipoBaseParamTipoParametro */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list, false);
            }
            break;
            case 33: /* reduce ATipoParamContTipoParametro */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce AParametroCont */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list, false);
            }
            break;
            case 35: /* reduce AComandoIfComando */
            {
                ArrayList<Object> list = new35();
                push(goTo(17), list, false);
            }
            break;
            case 36: /* reduce AComandoWhileComando */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list, false);
            }
            break;
            case 37: /* reduce AComandoVarComando */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list, false);
            }
            break;
            case 38: /* reduce AComandoChamadaComando */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list, false);
            }
            break;
            case 39: /* reduce AComandoBlocoComando */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list, false);
            }
            break;
            case 40: /* reduce AIfSemElseComandosIf */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list, false);
            }
            break;
            case 41: /* reduce AIfComElseComandosIf */
            {
                ArrayList<Object> list = new41();
                push(goTo(18), list, false);
            }
            break;
            case 42: /* reduce AIfComElse */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list, false);
            }
            break;
            case 43: /* reduce AIfComElse2 */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list, false);
            }
            break;
            case 44: /* reduce AComandoComElse */
            {
                ArrayList<Object> list = new44();
                push(goTo(21), list, false);
            }
            break;
            case 45: /* reduce ABloco */
            {
                ArrayList<Object> list = new45();
                push(goTo(22), list, false);
            }
            break;
            case 46: /* reduce AOpDecVarOpcaoBloco */
            {
                ArrayList<Object> list = new46();
                push(goTo(23), list, false);
            }
            break;
            case 47: /* reduce AOpDecConstOpcaoBloco */
            {
                ArrayList<Object> list = new47();
                push(goTo(23), list, false);
            }
            break;
            case 48: /* reduce AOpComandoOpcaoBloco */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list, false);
            }
            break;
            case 49: /* reduce AContBlocoContBloco */
            {
                ArrayList<Object> list = new49();
                push(goTo(24), list, false);
            }
            break;
            case 50: /* reduce ABaseContBlocoContBloco */
            {
                ArrayList<Object> list = new50();
                push(goTo(24), list, false);
            }
            break;
            case 51: /* reduce AIdVariavelVar */
            {
                ArrayList<Object> list = new51();
                push(goTo(25), list, false);
            }
            break;
            case 52: /* reduce AComandoVarRecVar */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list, false);
            }
            break;
            case 53: /* reduce ATesteExp */
            {
                ArrayList<Object> list = new53();
                push(goTo(26), list, false);
            }
            break;
            case 54: /* reduce AContExp */
            {
                ArrayList<Object> list = new54();
                push(goTo(27), list, false);
            }
            break;
            case 55: /* reduce AChamada */
            {
                ArrayList<Object> list = new55();
                push(goTo(28), list, false);
            }
            break;
            case 56: /* reduce AVazioListaExp */
            {
                ArrayList<Object> list = new56();
                push(goTo(29), list, false);
            }
            break;
            case 57: /* reduce AAlistaexplistaexp1ListaExp */
            {
                ArrayList<Object> list = new57();
                push(goTo(29), list, false);
            }
            break;
            case 58: /* reduce AAlistaexplistaexp2ListaExp */
            {
                ArrayList<Object> list = new58();
                push(goTo(29), list, false);
            }
            break;
            case 59: /* reduce AIdOpcaoVar */
            {
                ArrayList<Object> list = new59();
                push(goTo(30), list, false);
            }
            break;
            case 60: /* reduce AInicializacaoOpcaoVar */
            {
                ArrayList<Object> list = new60();
                push(goTo(30), list, false);
            }
            break;
            case 61: /* reduce AContOpcaoVar */
            {
                ArrayList<Object> list = new61();
                push(goTo(31), list, false);
            }
            break;
            case 62: /* reduce ATerminal$ContOpcaoVar */
            {
                ArrayList<Object> list = new62();
                push(goTo(32), list, true);
            }
            break;
            case 63: /* reduce ANonTerminal$ContOpcaoVar */
            {
                ArrayList<Object> list = new63();
                push(goTo(32), list, true);
            }
            break;
            case 64: /* reduce ATerminal$ContInicializacao */
            {
                ArrayList<Object> list = new64();
                push(goTo(33), list, true);
            }
            break;
            case 65: /* reduce ANonTerminal$ContInicializacao */
            {
                ArrayList<Object> list = new65();
                push(goTo(33), list, true);
            }
            break;
            case 66: /* reduce ATerminal$ContExp */
            {
                ArrayList<Object> list = new66();
                push(goTo(34), list, true);
            }
            break;
            case 67: /* reduce ANonTerminal$ContExp */
            {
                ArrayList<Object> list = new67();
                push(goTo(34), list, true);
            }
            break;
            case 68: /* reduce ATerminal$ParametroCont */
            {
                ArrayList<Object> list = new68();
                push(goTo(35), list, true);
            }
            break;
            case 69: /* reduce ANonTerminal$ParametroCont */
            {
                ArrayList<Object> list = new69();
                push(goTo(35), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AInicioPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInicioPrograma pinicioprogramaNode1;
        {
            // Block
        PPrograma pprogramaNode2;
        pprogramaNode2 = (PPrograma)nodeArrayList1.get(0);

        pinicioprogramaNode1 = new AInicioPrograma(pprogramaNode2);
        }
	nodeList.add(pinicioprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ADecVariavelRecPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PPrograma pprogramaNode2;
        PDecVar pdecvarNode3;
        pprogramaNode2 = (PPrograma)nodeArrayList1.get(0);
        pdecvarNode3 = (PDecVar)nodeArrayList2.get(0);

        pprogramaNode1 = new ADecVariavelRecPrograma(pprogramaNode2, pdecvarNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADecVariavelUnicoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PDecVar pdecvarNode2;
        pdecvarNode2 = (PDecVar)nodeArrayList1.get(0);

        pprogramaNode1 = new ADecVariavelUnicoPrograma(pdecvarNode2);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADecConstanteRecPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PPrograma pprogramaNode2;
        PDecConst pdecconstNode3;
        pprogramaNode2 = (PPrograma)nodeArrayList1.get(0);
        pdecconstNode3 = (PDecConst)nodeArrayList2.get(0);

        pprogramaNode1 = new ADecConstanteRecPrograma(pprogramaNode2, pdecconstNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADecConstanteUnicoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PDecConst pdecconstNode2;
        pdecconstNode2 = (PDecConst)nodeArrayList1.get(0);

        pprogramaNode1 = new ADecConstanteUnicoPrograma(pdecconstNode2);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADecProcedimentoRecPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PPrograma pprogramaNode2;
        PDecProcedimento pdecprocedimentoNode3;
        pprogramaNode2 = (PPrograma)nodeArrayList1.get(0);
        pdecprocedimentoNode3 = (PDecProcedimento)nodeArrayList2.get(0);

        pprogramaNode1 = new ADecProcedimentoRecPrograma(pprogramaNode2, pdecprocedimentoNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADecProcedimentoUnicoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PDecProcedimento pdecprocedimentoNode2;
        pdecprocedimentoNode2 = (PDecProcedimento)nodeArrayList1.get(0);

        pprogramaNode1 = new ADecProcedimentoUnicoPrograma(pdecprocedimentoNode2);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADecFuncaoRecPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PPrograma pprogramaNode2;
        PDecFuncao pdecfuncaoNode3;
        pprogramaNode2 = (PPrograma)nodeArrayList1.get(0);
        pdecfuncaoNode3 = (PDecFuncao)nodeArrayList2.get(0);

        pprogramaNode1 = new ADecFuncaoRecPrograma(pprogramaNode2, pdecfuncaoNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADecFuncaoUnicoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PDecFuncao pdecfuncaoNode2;
        pdecfuncaoNode2 = (PDecFuncao)nodeArrayList1.get(0);

        pprogramaNode1 = new ADecFuncaoUnicoPrograma(pdecfuncaoNode2);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAdecvar1DecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVar pdecvarNode1;
        {
            // Block
        TVar tvarNode2;
        PTipo ptipoNode3;
        POpcaoVar popcaovarNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TPontoVirgula tpontovirgulaNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        popcaovarNode4 = (POpcaoVar)nodeArrayList3.get(0);
        {
            // Block
        }
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList4.get(0);

        pdecvarNode1 = new ADecVar(tvarNode2, ptipoNode3, popcaovarNode4, listNode5, tpontovirgulaNode6);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAdecvar2DecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVar pdecvarNode1;
        {
            // Block
        TVar tvarNode2;
        PTipo ptipoNode3;
        POpcaoVar popcaovarNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TPontoVirgula tpontovirgulaNode7;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        popcaovarNode4 = (POpcaoVar)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tpontovirgulaNode7 = (TPontoVirgula)nodeArrayList5.get(0);

        pdecvarNode1 = new ADecVar(tvarNode2, ptipoNode3, popcaovarNode4, listNode6, tpontovirgulaNode7);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAdecconst1DecConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecConst pdecconstNode1;
        {
            // Block
        TCons tconsNode2;
        PTipo ptipoNode3;
        PInicializacao pinicializacaoNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TPontoVirgula tpontovirgulaNode6;
        tconsNode2 = (TCons)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        pinicializacaoNode4 = (PInicializacao)nodeArrayList3.get(0);
        {
            // Block
        }
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList4.get(0);

        pdecconstNode1 = new ADecConst(tconsNode2, ptipoNode3, pinicializacaoNode4, listNode5, tpontovirgulaNode6);
        }
	nodeList.add(pdecconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAdecconst2DecConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecConst pdecconstNode1;
        {
            // Block
        TCons tconsNode2;
        PTipo ptipoNode3;
        PInicializacao pinicializacaoNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TPontoVirgula tpontovirgulaNode7;
        tconsNode2 = (TCons)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        pinicializacaoNode4 = (PInicializacao)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tpontovirgulaNode7 = (TPontoVirgula)nodeArrayList5.get(0);

        pdecconstNode1 = new ADecConst(tconsNode2, ptipoNode3, pinicializacaoNode4, listNode6, tpontovirgulaNode7);
        }
	nodeList.add(pdecconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AInicializacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInicializacao pinicializacaoNode1;
        {
            // Block
        TId tidNode2;
        TAtri tatriNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tatriNode3 = (TAtri)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pinicializacaoNode1 = new AInicializacao(tidNode2, tatriNode3, pexpNode4);
        }
	nodeList.add(pinicializacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AContInicializacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContInicializacao pcontinicializacaoNode1;
        {
            // Block
        TVirgula tvirgulaNode2;
        PInicializacao pinicializacaoNode3;
        tvirgulaNode2 = (TVirgula)nodeArrayList1.get(0);
        pinicializacaoNode3 = (PInicializacao)nodeArrayList2.get(0);

        pcontinicializacaoNode1 = new AContInicializacao(tvirgulaNode2, pinicializacaoNode3);
        }
	nodeList.add(pcontinicializacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAarrayext1ArrayExt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayExt parrayextNode1;
        {
            // Block
        TColcheteE tcolcheteeNode2;
        PExp pexpNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TColcheteD tcolchetedNode5;
        tcolcheteeNode2 = (TColcheteE)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        {
            // Block
        }
        tcolchetedNode5 = (TColcheteD)nodeArrayList3.get(0);

        parrayextNode1 = new AArrayExt(tcolcheteeNode2, pexpNode3, listNode4, tcolchetedNode5);
        }
	nodeList.add(parrayextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAarrayext2ArrayExt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayExt parrayextNode1;
        {
            // Block
        TColcheteE tcolcheteeNode2;
        PExp pexpNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TColcheteD tcolchetedNode6;
        tcolcheteeNode2 = (TColcheteE)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcolchetedNode6 = (TColcheteD)nodeArrayList4.get(0);

        parrayextNode1 = new AArrayExt(tcolcheteeNode2, pexpNode3, listNode5, tcolchetedNode6);
        }
	nodeList.add(parrayextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayComp parraycompNode1;
        {
            // Block
        TColcheteE tcolcheteeNode2;
        TId tidNode3;
        TPipe tpipeNode4;
        PContArrayComp pcontarraycompNode5;
        TColcheteD tcolchetedNode6;
        tcolcheteeNode2 = (TColcheteE)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tpipeNode4 = (TPipe)nodeArrayList3.get(0);
        pcontarraycompNode5 = (PContArrayComp)nodeArrayList4.get(0);
        tcolchetedNode6 = (TColcheteD)nodeArrayList5.get(0);

        parraycompNode1 = new AArrayComp(tcolcheteeNode2, tidNode3, tpipeNode4, pcontarraycompNode5, tcolchetedNode6);
        }
	nodeList.add(parraycompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AArrayCompEscolhaContArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContArrayComp pcontarraycompNode1;
        {
            // Block
        PArrayComp parraycompNode2;
        parraycompNode2 = (PArrayComp)nodeArrayList1.get(0);

        pcontarraycompNode1 = new AArrayCompEscolhaContArrayComp(parraycompNode2);
        }
	nodeList.add(pcontarraycompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AExpEscolhaContArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContArrayComp pcontarraycompNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pcontarraycompNode1 = new AExpEscolhaContArrayComp(pexpNode2);
        }
	nodeList.add(pcontarraycompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ATipoCompostoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TColcheteE tcolcheteeNode3;
        PExp pexpNode4;
        TColcheteD tcolchetedNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tcolcheteeNode3 = (TColcheteE)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcolchetedNode5 = (TColcheteD)nodeArrayList4.get(0);

        ptipoNode1 = new ATipoCompostoTipo(ptipoNode2, tcolcheteeNode3, pexpNode4, tcolchetedNode5);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIntTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptipobaseNode1 = new AIntTipoBase(tintNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ABoolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptipobaseNode1 = new ABoolTipoBase(tboolNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ARealTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipobaseNode1 = new ARealTipoBase(trealNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ADecProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProcedimento pdecprocedimentoNode1;
        {
            // Block
        TProcedure tprocedureNode2;
        TId tidNode3;
        TParE tpareNode4;
        PParametros pparametrosNode5;
        TParD tpardNode6;
        PComando pcomandoNode7;
        tprocedureNode2 = (TProcedure)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tpareNode4 = (TParE)nodeArrayList3.get(0);
        pparametrosNode5 = (PParametros)nodeArrayList4.get(0);
        tpardNode6 = (TParD)nodeArrayList5.get(0);
        pcomandoNode7 = (PComando)nodeArrayList6.get(0);

        pdecprocedimentoNode1 = new ADecProcedimento(tprocedureNode2, tidNode3, tpareNode4, pparametrosNode5, tpardNode6, pcomandoNode7);
        }
	nodeList.add(pdecprocedimentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ADecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        TFunction tfunctionNode2;
        PTipo ptipoNode3;
        TId tidNode4;
        TParE tpareNode5;
        PParametros pparametrosNode6;
        TParD tpardNode7;
        PExp pexpNode8;
        tfunctionNode2 = (TFunction)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tpareNode5 = (TParE)nodeArrayList4.get(0);
        pparametrosNode6 = (PParametros)nodeArrayList5.get(0);
        tpardNode7 = (TParD)nodeArrayList6.get(0);
        pexpNode8 = (PExp)nodeArrayList7.get(0);

        pdecfuncaoNode1 = new ADecFuncao(tfunctionNode2, ptipoNode3, tidNode4, tpareNode5, pparametrosNode6, tpardNode7, pexpNode8);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AVazioParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParametros pparametrosNode1;
        {
            // Block

        pparametrosNode1 = new AVazioParametros();
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAparametros1Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametrosNode1 = new AParametros(pparametroNode2, listNode3);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAparametros2Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametrosNode1 = new AParametros(pparametroNode2, listNode4);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAparametro1Parametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PTipoParametro ptipoparametroNode3;
        TId tidNode4;
        ptipoparametroNode3 = (PTipoParametro)nodeArrayList1.get(0);
        tidNode4 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new AParametro(null, ptipoparametroNode3, tidNode4);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAparametro2Parametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        TVar tvarNode2;
        PTipoParametro ptipoparametroNode3;
        TId tidNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        ptipoparametroNode3 = (PTipoParametro)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        pparametroNode1 = new AParametro(tvarNode2, ptipoparametroNode3, tidNode4);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ATipoBaseParamTipoParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParametro ptipoparametroNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoparametroNode1 = new ATipoBaseParamTipoParametro(ptipobaseNode2);
        }
	nodeList.add(ptipoparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ATipoParamContTipoParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParametro ptipoparametroNode1;
        {
            // Block
        PTipoParametro ptipoparametroNode2;
        TColcheteE tcolcheteeNode3;
        TColcheteD tcolchetedNode4;
        ptipoparametroNode2 = (PTipoParametro)nodeArrayList1.get(0);
        tcolcheteeNode3 = (TColcheteE)nodeArrayList2.get(0);
        tcolchetedNode4 = (TColcheteD)nodeArrayList3.get(0);

        ptipoparametroNode1 = new ATipoParamContTipoParametro(ptipoparametroNode2, tcolcheteeNode3, tcolchetedNode4);
        }
	nodeList.add(ptipoparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AParametroCont */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametroCont pparametrocontNode1;
        {
            // Block
        TPontoVirgula tpontovirgulaNode2;
        PParametro pparametroNode3;
        tpontovirgulaNode2 = (TPontoVirgula)nodeArrayList1.get(0);
        pparametroNode3 = (PParametro)nodeArrayList2.get(0);

        pparametrocontNode1 = new AParametroCont(tpontovirgulaNode2, pparametroNode3);
        }
	nodeList.add(pparametrocontNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AComandoIfComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandosIf pcomandosifNode2;
        pcomandosifNode2 = (PComandosIf)nodeArrayList1.get(0);

        pcomandoNode1 = new AComandoIfComando(pcomandosifNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AComandoWhileComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TWhile twhileNode2;
        TParE tpareNode3;
        PExp pexpNode4;
        TParD tpardNode5;
        PComando pcomandoNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        pcomandoNode6 = (PComando)nodeArrayList5.get(0);

        pcomandoNode1 = new AComandoWhileComando(twhileNode2, tpareNode3, pexpNode4, tpardNode5, pcomandoNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AComandoVarComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TAtri tatriNode3;
        PExp pexpNode4;
        TPontoVirgula tpontovirgulaNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tatriNode3 = (TAtri)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);

        pcomandoNode1 = new AComandoVarComando(pvarNode2, tatriNode3, pexpNode4, tpontovirgulaNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AComandoChamadaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PChamada pchamadaNode2;
        TPontoVirgula tpontovirgulaNode3;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);
        tpontovirgulaNode3 = (TPontoVirgula)nodeArrayList2.get(0);

        pcomandoNode1 = new AComandoChamadaComando(pchamadaNode2, tpontovirgulaNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AComandoBlocoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        pcomandoNode1 = new AComandoBlocoComando(pblocoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIfSemElseComandosIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandosIf pcomandosifNode1;
        {
            // Block
        TIf tifNode2;
        TParE tpareNode3;
        PExp pexpNode4;
        TParD tpardNode5;
        TThen tthenNode6;
        PComando pcomandoNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tthenNode6 = (TThen)nodeArrayList5.get(0);
        pcomandoNode7 = (PComando)nodeArrayList6.get(0);

        pcomandosifNode1 = new AIfSemElseComandosIf(tifNode2, tpareNode3, pexpNode4, tpardNode5, tthenNode6, pcomandoNode7);
        }
	nodeList.add(pcomandosifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AIfComElseComandosIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandosIf pcomandosifNode1;
        {
            // Block
        TIf tifNode2;
        TParE tpareNode3;
        PExp pexpNode4;
        TParD tpardNode5;
        TThen tthenNode6;
        PIfComElse pifcomelseNode7;
        TElse telseNode8;
        PComando pcomandoNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tthenNode6 = (TThen)nodeArrayList5.get(0);
        pifcomelseNode7 = (PIfComElse)nodeArrayList6.get(0);
        telseNode8 = (TElse)nodeArrayList7.get(0);
        pcomandoNode9 = (PComando)nodeArrayList8.get(0);

        pcomandosifNode1 = new AIfComElseComandosIf(tifNode2, tpareNode3, pexpNode4, tpardNode5, tthenNode6, pifcomelseNode7, telseNode8, pcomandoNode9);
        }
	nodeList.add(pcomandosifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AIfComElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfComElse pifcomelseNode1;
        {
            // Block
        PComandoComElse pcomandocomelseNode2;
        pcomandocomelseNode2 = (PComandoComElse)nodeArrayList1.get(0);

        pifcomelseNode1 = new AIfComElse(pcomandocomelseNode2);
        }
	nodeList.add(pifcomelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIfComElse2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfComElse2 pifcomelse2Node1;
        {
            // Block
        PComandoComElse pcomandocomelseNode2;
        pcomandocomelseNode2 = (PComandoComElse)nodeArrayList1.get(0);

        pifcomelse2Node1 = new AIfComElse2(pcomandocomelseNode2);
        }
	nodeList.add(pifcomelse2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AComandoComElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoComElse pcomandocomelseNode1;
        {
            // Block
        TIf tifNode2;
        TParE tpareNode3;
        PExp pexpNode4;
        TParD tpardNode5;
        TThen tthenNode6;
        PIfComElse pifcomelseNode7;
        TElse telseNode8;
        PIfComElse2 pifcomelse2Node9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);
        tthenNode6 = (TThen)nodeArrayList5.get(0);
        pifcomelseNode7 = (PIfComElse)nodeArrayList6.get(0);
        telseNode8 = (TElse)nodeArrayList7.get(0);
        pifcomelse2Node9 = (PIfComElse2)nodeArrayList8.get(0);

        pcomandocomelseNode1 = new AComandoComElse(tifNode2, tpareNode3, pexpNode4, tpardNode5, tthenNode6, pifcomelseNode7, telseNode8, pifcomelse2Node9);
        }
	nodeList.add(pcomandocomelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ABloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TChaveE tchaveeNode2;
        PContBloco pcontblocoNode3;
        TChaveD tchavedNode4;
        tchaveeNode2 = (TChaveE)nodeArrayList1.get(0);
        pcontblocoNode3 = (PContBloco)nodeArrayList2.get(0);
        tchavedNode4 = (TChaveD)nodeArrayList3.get(0);

        pblocoNode1 = new ABloco(tchaveeNode2, pcontblocoNode3, tchavedNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AOpDecVarOpcaoBloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcaoBloco popcaoblocoNode1;
        {
            // Block
        PDecVar pdecvarNode2;
        pdecvarNode2 = (PDecVar)nodeArrayList1.get(0);

        popcaoblocoNode1 = new AOpDecVarOpcaoBloco(pdecvarNode2);
        }
	nodeList.add(popcaoblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AOpDecConstOpcaoBloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcaoBloco popcaoblocoNode1;
        {
            // Block
        PDecConst pdecconstNode2;
        pdecconstNode2 = (PDecConst)nodeArrayList1.get(0);

        popcaoblocoNode1 = new AOpDecConstOpcaoBloco(pdecconstNode2);
        }
	nodeList.add(popcaoblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AOpComandoOpcaoBloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcaoBloco popcaoblocoNode1;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);

        popcaoblocoNode1 = new AOpComandoOpcaoBloco(pcomandoNode2);
        }
	nodeList.add(popcaoblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AContBlocoContBloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContBloco pcontblocoNode1;
        {
            // Block
        PContBloco pcontblocoNode2;
        POpcaoBloco popcaoblocoNode3;
        pcontblocoNode2 = (PContBloco)nodeArrayList1.get(0);
        popcaoblocoNode3 = (POpcaoBloco)nodeArrayList2.get(0);

        pcontblocoNode1 = new AContBlocoContBloco(pcontblocoNode2, popcaoblocoNode3);
        }
	nodeList.add(pcontblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ABaseContBlocoContBloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContBloco pcontblocoNode1;
        {
            // Block
        POpcaoBloco popcaoblocoNode2;
        popcaoblocoNode2 = (POpcaoBloco)nodeArrayList1.get(0);

        pcontblocoNode1 = new ABaseContBlocoContBloco(popcaoblocoNode2);
        }
	nodeList.add(pcontblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AIdVariavelVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVariavelVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AComandoVarRecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PVar pvarNode2;
        TColcheteE tcolcheteeNode3;
        PExp pexpNode4;
        TColcheteD tcolchetedNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tcolcheteeNode3 = (TColcheteE)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcolchetedNode5 = (TColcheteD)nodeArrayList4.get(0);

        pvarNode1 = new AComandoVarRecVar(pvarNode2, tcolcheteeNode3, pexpNode4, tcolchetedNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ATesteExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TThen tthenNode2;
        TId tidNode3;
        tthenNode2 = (TThen)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pexpNode1 = new ATesteExp(tthenNode2, tidNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AContExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContExp pcontexpNode1;
        {
            // Block
        TPontoVirgula tpontovirgulaNode2;
        PExp pexpNode3;
        tpontovirgulaNode2 = (TPontoVirgula)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pcontexpNode1 = new AContExp(tpontovirgulaNode2, pexpNode3);
        }
	nodeList.add(pcontexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AChamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        TId tidNode2;
        TParE tpareNode3;
        PListaExp plistaexpNode4;
        TParD tpardNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpareNode3 = (TParE)nodeArrayList2.get(0);
        plistaexpNode4 = (PListaExp)nodeArrayList3.get(0);
        tpardNode5 = (TParD)nodeArrayList4.get(0);

        pchamadaNode1 = new AChamada(tidNode2, tpareNode3, plistaexpNode4, tpardNode5);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AVazioListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListaExp plistaexpNode1;
        {
            // Block

        plistaexpNode1 = new AVazioListaExp();
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAlistaexplistaexp1ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        }

        plistaexpNode1 = new AListaExpListaExp(pexpNode2, listNode3);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAlistaexplistaexp2ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistaexpNode1 = new AListaExpListaExp(pexpNode2, listNode4);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AIdOpcaoVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcaoVar popcaovarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        popcaovarNode1 = new AIdOpcaoVar(tidNode2);
        }
	nodeList.add(popcaovarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AInicializacaoOpcaoVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcaoVar popcaovarNode1;
        {
            // Block
        PInicializacao pinicializacaoNode2;
        pinicializacaoNode2 = (PInicializacao)nodeArrayList1.get(0);

        popcaovarNode1 = new AInicializacaoOpcaoVar(pinicializacaoNode2);
        }
	nodeList.add(popcaovarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AContOpcaoVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContOpcaoVar pcontopcaovarNode1;
        {
            // Block
        TVirgula tvirgulaNode2;
        POpcaoVar popcaovarNode3;
        tvirgulaNode2 = (TVirgula)nodeArrayList1.get(0);
        popcaovarNode3 = (POpcaoVar)nodeArrayList2.get(0);

        pcontopcaovarNode1 = new AContOpcaoVar(tvirgulaNode2, popcaovarNode3);
        }
	nodeList.add(pcontopcaovarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$ContOpcaoVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PContOpcaoVar pcontopcaovarNode1;
        pcontopcaovarNode1 = (PContOpcaoVar)nodeArrayList1.get(0);
	if(pcontopcaovarNode1 != null)
	{
	  listNode2.add(pcontopcaovarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$ContOpcaoVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PContOpcaoVar pcontopcaovarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcontopcaovarNode2 = (PContOpcaoVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcontopcaovarNode2 != null)
	{
	  listNode3.add(pcontopcaovarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ATerminal$ContInicializacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PContInicializacao pcontinicializacaoNode1;
        pcontinicializacaoNode1 = (PContInicializacao)nodeArrayList1.get(0);
	if(pcontinicializacaoNode1 != null)
	{
	  listNode2.add(pcontinicializacaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANonTerminal$ContInicializacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PContInicializacao pcontinicializacaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcontinicializacaoNode2 = (PContInicializacao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcontinicializacaoNode2 != null)
	{
	  listNode3.add(pcontinicializacaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATerminal$ContExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PContExp pcontexpNode1;
        pcontexpNode1 = (PContExp)nodeArrayList1.get(0);
	if(pcontexpNode1 != null)
	{
	  listNode2.add(pcontexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANonTerminal$ContExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PContExp pcontexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcontexpNode2 = (PContExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcontexpNode2 != null)
	{
	  listNode3.add(pcontexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATerminal$ParametroCont */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParametroCont pparametrocontNode1;
        pparametrocontNode1 = (PParametroCont)nodeArrayList1.get(0);
	if(pparametrocontNode1 != null)
	{
	  listNode2.add(pparametrocontNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANonTerminal$ParametroCont */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParametroCont pparametrocontNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparametrocontNode2 = (PParametroCont)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparametrocontNode2 != null)
	{
	  listNode3.add(pparametrocontNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {9, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {12, SHIFT, 4}, },
			{{-1, ERROR, 1}, {33, SHIFT, 11}, },
			{{-1, ERROR, 2}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, },
			{{-1, ERROR, 3}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, },
			{{-1, ERROR, 4}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, },
			{{-1, ERROR, 5}, {36, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {9, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {12, SHIFT, 4}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 11}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 15}, {25, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 17}, {25, SHIFT, 24}, {33, SHIFT, 26}, },
			{{-1, ERROR, 18}, {25, SHIFT, 24}, {33, SHIFT, 28}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 27}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {12, SHIFT, 31}, },
			{{-1, ERROR, 24}, {6, SHIFT, 36}, },
			{{-1, ERROR, 25}, {29, SHIFT, 38}, },
			{{-1, ERROR, 26}, {13, SHIFT, 39}, },
			{{-1, ERROR, 27}, {31, SHIFT, 40}, {32, SHIFT, 41}, },
			{{-1, REDUCE, 59}, {13, SHIFT, 39}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 30}, {31, SHIFT, 44}, {32, SHIFT, 45}, },
			{{-1, ERROR, 31}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 33}, {30, SHIFT, 49}, },
			{{-1, REDUCE, 28}, {31, SHIFT, 50}, },
			{{-1, ERROR, 35}, {25, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, ERROR, 36}, {33, SHIFT, 55}, },
			{{-1, ERROR, 37}, {26, SHIFT, 56}, },
			{{-1, REDUCE, 27}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {12, SHIFT, 31}, },
			{{-1, ERROR, 39}, {6, SHIFT, 36}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 41}, {33, SHIFT, 26}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 43}, {31, SHIFT, 60}, {32, SHIFT, 41}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 45}, {33, SHIFT, 28}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 47}, {31, SHIFT, 63}, {32, SHIFT, 45}, },
			{{-1, ERROR, 48}, {25, SHIFT, 53}, {33, SHIFT, 65}, },
			{{-1, ERROR, 49}, {5, SHIFT, 66}, {8, SHIFT, 67}, {27, SHIFT, 68}, {33, SHIFT, 69}, },
			{{-1, ERROR, 50}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {12, SHIFT, 31}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 29}, {31, SHIFT, 50}, },
			{{-1, ERROR, 53}, {26, SHIFT, 77}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 57}, {30, SHIFT, 78}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 66}, {29, SHIFT, 79}, },
			{{-1, ERROR, 67}, {29, SHIFT, 80}, },
			{{-1, ERROR, 68}, {5, SHIFT, 66}, {8, SHIFT, 67}, {11, SHIFT, 3}, {12, SHIFT, 4}, {27, SHIFT, 68}, {33, SHIFT, 69}, },
			{{-1, REDUCE, 51}, {29, SHIFT, 86}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 73}, {13, SHIFT, 87}, {25, SHIFT, 88}, },
			{{-1, ERROR, 74}, {31, SHIFT, 89}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 78}, {6, SHIFT, 36}, },
			{{-1, ERROR, 79}, {6, SHIFT, 36}, },
			{{-1, ERROR, 80}, {6, SHIFT, 36}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 85}, {5, SHIFT, 66}, {8, SHIFT, 67}, {11, SHIFT, 3}, {12, SHIFT, 4}, {27, SHIFT, 68}, {28, SHIFT, 93}, {33, SHIFT, 69}, },
			{{-1, REDUCE, 56}, {6, SHIFT, 36}, },
			{{-1, ERROR, 87}, {6, SHIFT, 36}, },
			{{-1, ERROR, 88}, {6, SHIFT, 36}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 91}, {30, SHIFT, 99}, },
			{{-1, ERROR, 92}, {30, SHIFT, 100}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 57}, {31, SHIFT, 101}, },
			{{-1, ERROR, 96}, {30, SHIFT, 104}, },
			{{-1, ERROR, 97}, {31, SHIFT, 105}, },
			{{-1, ERROR, 98}, {26, SHIFT, 106}, },
			{{-1, ERROR, 99}, {6, SHIFT, 107}, },
			{{-1, ERROR, 100}, {5, SHIFT, 66}, {8, SHIFT, 67}, {27, SHIFT, 68}, {33, SHIFT, 69}, },
			{{-1, ERROR, 101}, {6, SHIFT, 36}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 58}, {31, SHIFT, 101}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 107}, {5, SHIFT, 111}, {8, SHIFT, 67}, {27, SHIFT, 68}, {33, SHIFT, 69}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 111}, {29, SHIFT, 115}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 113}, {7, SHIFT, 116}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 115}, {6, SHIFT, 36}, },
			{{-1, ERROR, 116}, {5, SHIFT, 66}, {8, SHIFT, 67}, {27, SHIFT, 68}, {33, SHIFT, 69}, },
			{{-1, ERROR, 117}, {30, SHIFT, 119}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 119}, {6, SHIFT, 120}, },
			{{-1, ERROR, 120}, {5, SHIFT, 111}, {8, SHIFT, 67}, {27, SHIFT, 68}, {33, SHIFT, 69}, },
			{{-1, ERROR, 121}, {7, SHIFT, 122}, },
			{{-1, ERROR, 122}, {5, SHIFT, 111}, {8, SHIFT, 67}, {27, SHIFT, 68}, {33, SHIFT, 69}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 43}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 81}, {0, 7}, {6, 19}, },
			{{-1, 82}, {0, 8}, {6, 20}, },
			{{-1, 29}, {17, 27}, {41, 59}, },
			{{-1, 42}, {43, 61}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 15}, {3, 17}, {4, 18}, },
			{{-1, 32}, {2, 16}, {3, 16}, {4, 16}, },
			{{-1, 9}, {6, 21}, },
			{{-1, 10}, {6, 22}, },
			{{-1, 33}, {38, 57}, },
			{{-1, 34}, {50, 75}, },
			{{-1, 35}, {31, 48}, },
			{{-1, 51}, {52, 76}, },
			{{-1, 83}, {49, 70}, {100, 108}, {107, 112}, {116, 118}, {120, 112}, {122, 118}, },
			{{-1, 71}, },
			{{-1, 113}, {120, 121}, },
			{{-1, 123}, },
			{{-1, 114}, {122, 124}, },
			{{-1, 72}, },
			{{-1, 84}, {85, 94}, },
			{{-1, 85}, },
			{{-1, 73}, },
			{{-1, 37}, {39, 58}, {78, 90}, {79, 91}, {80, 92}, {86, 95}, {87, 97}, {88, 98}, {101, 109}, {115, 117}, },
			{{-1, 102}, {103, 110}, },
			{{-1, 74}, },
			{{-1, 96}, },
			{{-1, 30}, {45, 62}, },
			{{-1, 46}, {47, 64}, },
			{{-1, 47}, },
			{{-1, 43}, },
			{{-1, 103}, },
			{{-1, 52}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'procedure', 'function', 'cons', 'var'",
			"expecting: id",
			"expecting: 'real', 'int', 'bool'",
			"expecting: EOF",
			"expecting: 'procedure', 'function', 'cons', 'var', EOF",
			"expecting: '('",
			"expecting: '[', id",
			"expecting: 'real', 'int', 'bool', 'var', ')'",
			"expecting: 'then'",
			"expecting: ':='",
			"expecting: ';', ','",
			"expecting: ':=', ';', ','",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: ']'",
			"expecting: 'if', 'while', 'procedure', 'function', 'cons', 'var', '{', '}', id, EOF",
			"expecting: 'if', 'while', '{', id",
			"expecting: 'real', 'int', 'bool', 'var'",
			"expecting: 'procedure', 'function', 'cons', 'var', ']', ')', ';', ',', EOF",
			"expecting: 'if', 'while', 'cons', 'var', '{', id",
			"expecting: ':=', '[', '('",
			"expecting: ':=', '['",
			"expecting: ';'",
			"expecting: 'if', 'while', 'cons', 'var', '{', '}', id",
			"expecting: 'then', ')'",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 2, 3, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 7, 8, 5, 9, 10, 11, 10, 10, 2, 6, 12, 13, 6, 1, 14, 7, 8, 15, 1, 10, 10, 15, 1, 10, 10, 6, 16, 17, 13, 13, 14, 13, 18, 6, 12, 10, 10, 15, 10, 10, 15, 10, 13, 5, 5, 19, 20, 4, 15, 15, 21, 22, 13, 13, 6, 8, 8, 8, 23, 23, 23, 23, 23, 24, 8, 8, 15, 4, 12, 12, 15, 23, 13, 12, 22, 14, 8, 16, 8, 13, 13, 22, 15, 21, 16, 15, 13, 13, 5, 15, 25, 25, 8, 16, 12, 15, 8, 16, 25, 16, 25, 25, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
