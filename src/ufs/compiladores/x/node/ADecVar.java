/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.node;

import java.util.*;
import ufs.compiladores.x.analysis.*;

@SuppressWarnings("nls")
public final class ADecVar extends PDecVar
{
    private TVar _var_;
    private PTipo _tipo_;
    private POpcaoVar _opcaoVar_;
    private final LinkedList<PContOpcaoVar> _contOpcaoVar_ = new LinkedList<PContOpcaoVar>();
    private TPontoVirgula _pontoVirgula_;

    public ADecVar()
    {
        // Constructor
    }

    public ADecVar(
        @SuppressWarnings("hiding") TVar _var_,
        @SuppressWarnings("hiding") PTipo _tipo_,
        @SuppressWarnings("hiding") POpcaoVar _opcaoVar_,
        @SuppressWarnings("hiding") List<?> _contOpcaoVar_,
        @SuppressWarnings("hiding") TPontoVirgula _pontoVirgula_)
    {
        // Constructor
        setVar(_var_);

        setTipo(_tipo_);

        setOpcaoVar(_opcaoVar_);

        setContOpcaoVar(_contOpcaoVar_);

        setPontoVirgula(_pontoVirgula_);

    }

    @Override
    public Object clone()
    {
        return new ADecVar(
            cloneNode(this._var_),
            cloneNode(this._tipo_),
            cloneNode(this._opcaoVar_),
            cloneList(this._contOpcaoVar_),
            cloneNode(this._pontoVirgula_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecVar(this);
    }

    public TVar getVar()
    {
        return this._var_;
    }

    public void setVar(TVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public PTipo getTipo()
    {
        return this._tipo_;
    }

    public void setTipo(PTipo node)
    {
        if(this._tipo_ != null)
        {
            this._tipo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipo_ = node;
    }

    public POpcaoVar getOpcaoVar()
    {
        return this._opcaoVar_;
    }

    public void setOpcaoVar(POpcaoVar node)
    {
        if(this._opcaoVar_ != null)
        {
            this._opcaoVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opcaoVar_ = node;
    }

    public LinkedList<PContOpcaoVar> getContOpcaoVar()
    {
        return this._contOpcaoVar_;
    }

    public void setContOpcaoVar(List<?> list)
    {
        for(PContOpcaoVar e : this._contOpcaoVar_)
        {
            e.parent(null);
        }
        this._contOpcaoVar_.clear();

        for(Object obj_e : list)
        {
            PContOpcaoVar e = (PContOpcaoVar) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._contOpcaoVar_.add(e);
        }
    }

    public TPontoVirgula getPontoVirgula()
    {
        return this._pontoVirgula_;
    }

    public void setPontoVirgula(TPontoVirgula node)
    {
        if(this._pontoVirgula_ != null)
        {
            this._pontoVirgula_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pontoVirgula_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._tipo_)
            + toString(this._opcaoVar_)
            + toString(this._contOpcaoVar_)
            + toString(this._pontoVirgula_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._tipo_ == child)
        {
            this._tipo_ = null;
            return;
        }

        if(this._opcaoVar_ == child)
        {
            this._opcaoVar_ = null;
            return;
        }

        if(this._contOpcaoVar_.remove(child))
        {
            return;
        }

        if(this._pontoVirgula_ == child)
        {
            this._pontoVirgula_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((TVar) newChild);
            return;
        }

        if(this._tipo_ == oldChild)
        {
            setTipo((PTipo) newChild);
            return;
        }

        if(this._opcaoVar_ == oldChild)
        {
            setOpcaoVar((POpcaoVar) newChild);
            return;
        }

        for(ListIterator<PContOpcaoVar> i = this._contOpcaoVar_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PContOpcaoVar) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._pontoVirgula_ == oldChild)
        {
            setPontoVirgula((TPontoVirgula) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
