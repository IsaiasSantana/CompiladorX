/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.node;

import ufs.compiladores.x.analysis.*;

@SuppressWarnings("nls")
public final class AOperacaoAndExpAnd extends PExpAnd
{
    private PExpAnd _expAnd_;
    private TAnd _and_;
    private POpIgual _opIgual_;

    public AOperacaoAndExpAnd()
    {
        // Constructor
    }

    public AOperacaoAndExpAnd(
        @SuppressWarnings("hiding") PExpAnd _expAnd_,
        @SuppressWarnings("hiding") TAnd _and_,
        @SuppressWarnings("hiding") POpIgual _opIgual_)
    {
        // Constructor
        setExpAnd(_expAnd_);

        setAnd(_and_);

        setOpIgual(_opIgual_);

    }

    @Override
    public Object clone()
    {
        return new AOperacaoAndExpAnd(
            cloneNode(this._expAnd_),
            cloneNode(this._and_),
            cloneNode(this._opIgual_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOperacaoAndExpAnd(this);
    }

    public PExpAnd getExpAnd()
    {
        return this._expAnd_;
    }

    public void setExpAnd(PExpAnd node)
    {
        if(this._expAnd_ != null)
        {
            this._expAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expAnd_ = node;
    }

    public TAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(TAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    public POpIgual getOpIgual()
    {
        return this._opIgual_;
    }

    public void setOpIgual(POpIgual node)
    {
        if(this._opIgual_ != null)
        {
            this._opIgual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opIgual_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expAnd_)
            + toString(this._and_)
            + toString(this._opIgual_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expAnd_ == child)
        {
            this._expAnd_ = null;
            return;
        }

        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        if(this._opIgual_ == child)
        {
            this._opIgual_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expAnd_ == oldChild)
        {
            setExpAnd((PExpAnd) newChild);
            return;
        }

        if(this._and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(this._opIgual_ == oldChild)
        {
            setOpIgual((POpIgual) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
