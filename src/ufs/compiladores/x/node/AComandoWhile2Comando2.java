/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.node;

import ufs.compiladores.x.analysis.*;

@SuppressWarnings("nls")
public final class AComandoWhile2Comando2 extends PComando2
{
    private PExp _exp_;
    private PComando2 _comando2_;

    public AComandoWhile2Comando2()
    {
        // Constructor
    }

    public AComandoWhile2Comando2(
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") PComando2 _comando2_)
    {
        // Constructor
        setExp(_exp_);

        setComando2(_comando2_);

    }

    @Override
    public Object clone()
    {
        return new AComandoWhile2Comando2(
            cloneNode(this._exp_),
            cloneNode(this._comando2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComandoWhile2Comando2(this);
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public PComando2 getComando2()
    {
        return this._comando2_;
    }

    public void setComando2(PComando2 node)
    {
        if(this._comando2_ != null)
        {
            this._comando2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comando2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._comando2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._comando2_ == child)
        {
            this._comando2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._comando2_ == oldChild)
        {
            setComando2((PComando2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
