/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.node;

import ufs.compiladores.x.analysis.*;

@SuppressWarnings("nls")
public final class AIfElseExpExp extends PExp
{
    private PExp _exp_;
    private PThenParte _thenParte_;
    private PElseParte _elseParte_;

    public AIfElseExpExp()
    {
        // Constructor
    }

    public AIfElseExpExp(
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") PThenParte _thenParte_,
        @SuppressWarnings("hiding") PElseParte _elseParte_)
    {
        // Constructor
        setExp(_exp_);

        setThenParte(_thenParte_);

        setElseParte(_elseParte_);

    }

    @Override
    public Object clone()
    {
        return new AIfElseExpExp(
            cloneNode(this._exp_),
            cloneNode(this._thenParte_),
            cloneNode(this._elseParte_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfElseExpExp(this);
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public PThenParte getThenParte()
    {
        return this._thenParte_;
    }

    public void setThenParte(PThenParte node)
    {
        if(this._thenParte_ != null)
        {
            this._thenParte_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenParte_ = node;
    }

    public PElseParte getElseParte()
    {
        return this._elseParte_;
    }

    public void setElseParte(PElseParte node)
    {
        if(this._elseParte_ != null)
        {
            this._elseParte_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseParte_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._thenParte_)
            + toString(this._elseParte_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._thenParte_ == child)
        {
            this._thenParte_ = null;
            return;
        }

        if(this._elseParte_ == child)
        {
            this._elseParte_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._thenParte_ == oldChild)
        {
            setThenParte((PThenParte) newChild);
            return;
        }

        if(this._elseParte_ == oldChild)
        {
            setElseParte((PElseParte) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
