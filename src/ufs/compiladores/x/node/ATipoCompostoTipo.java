/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.node;

import ufs.compiladores.x.analysis.*;

@SuppressWarnings("nls")
public final class ATipoCompostoTipo extends PTipo
{
    private PTipo _tipo_;
    private TColcheteE _colcheteE_;
    private PExp _exp_;
    private TColcheteD _colcheteD_;

    public ATipoCompostoTipo()
    {
        // Constructor
    }

    public ATipoCompostoTipo(
        @SuppressWarnings("hiding") PTipo _tipo_,
        @SuppressWarnings("hiding") TColcheteE _colcheteE_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TColcheteD _colcheteD_)
    {
        // Constructor
        setTipo(_tipo_);

        setColcheteE(_colcheteE_);

        setExp(_exp_);

        setColcheteD(_colcheteD_);

    }

    @Override
    public Object clone()
    {
        return new ATipoCompostoTipo(
            cloneNode(this._tipo_),
            cloneNode(this._colcheteE_),
            cloneNode(this._exp_),
            cloneNode(this._colcheteD_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATipoCompostoTipo(this);
    }

    public PTipo getTipo()
    {
        return this._tipo_;
    }

    public void setTipo(PTipo node)
    {
        if(this._tipo_ != null)
        {
            this._tipo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipo_ = node;
    }

    public TColcheteE getColcheteE()
    {
        return this._colcheteE_;
    }

    public void setColcheteE(TColcheteE node)
    {
        if(this._colcheteE_ != null)
        {
            this._colcheteE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colcheteE_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TColcheteD getColcheteD()
    {
        return this._colcheteD_;
    }

    public void setColcheteD(TColcheteD node)
    {
        if(this._colcheteD_ != null)
        {
            this._colcheteD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colcheteD_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tipo_)
            + toString(this._colcheteE_)
            + toString(this._exp_)
            + toString(this._colcheteD_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tipo_ == child)
        {
            this._tipo_ = null;
            return;
        }

        if(this._colcheteE_ == child)
        {
            this._colcheteE_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._colcheteD_ == child)
        {
            this._colcheteD_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tipo_ == oldChild)
        {
            setTipo((PTipo) newChild);
            return;
        }

        if(this._colcheteE_ == oldChild)
        {
            setColcheteE((TColcheteE) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._colcheteD_ == oldChild)
        {
            setColcheteD((TColcheteD) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
