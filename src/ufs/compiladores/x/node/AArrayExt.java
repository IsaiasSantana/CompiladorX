/* This file was generated by SableCC (http://www.sablecc.org/). */

package ufs.compiladores.x.node;

import java.util.*;
import ufs.compiladores.x.analysis.*;

@SuppressWarnings("nls")
public final class AArrayExt extends PArrayExt
{
    private TColcheteE _colcheteE_;
    private PExp _exp_;
    private final LinkedList<PContExp> _contExp_ = new LinkedList<PContExp>();
    private TColcheteD _colcheteD_;

    public AArrayExt()
    {
        // Constructor
    }

    public AArrayExt(
        @SuppressWarnings("hiding") TColcheteE _colcheteE_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") List<?> _contExp_,
        @SuppressWarnings("hiding") TColcheteD _colcheteD_)
    {
        // Constructor
        setColcheteE(_colcheteE_);

        setExp(_exp_);

        setContExp(_contExp_);

        setColcheteD(_colcheteD_);

    }

    @Override
    public Object clone()
    {
        return new AArrayExt(
            cloneNode(this._colcheteE_),
            cloneNode(this._exp_),
            cloneList(this._contExp_),
            cloneNode(this._colcheteD_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayExt(this);
    }

    public TColcheteE getColcheteE()
    {
        return this._colcheteE_;
    }

    public void setColcheteE(TColcheteE node)
    {
        if(this._colcheteE_ != null)
        {
            this._colcheteE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colcheteE_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public LinkedList<PContExp> getContExp()
    {
        return this._contExp_;
    }

    public void setContExp(List<?> list)
    {
        for(PContExp e : this._contExp_)
        {
            e.parent(null);
        }
        this._contExp_.clear();

        for(Object obj_e : list)
        {
            PContExp e = (PContExp) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._contExp_.add(e);
        }
    }

    public TColcheteD getColcheteD()
    {
        return this._colcheteD_;
    }

    public void setColcheteD(TColcheteD node)
    {
        if(this._colcheteD_ != null)
        {
            this._colcheteD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colcheteD_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._colcheteE_)
            + toString(this._exp_)
            + toString(this._contExp_)
            + toString(this._colcheteD_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._colcheteE_ == child)
        {
            this._colcheteE_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._contExp_.remove(child))
        {
            return;
        }

        if(this._colcheteD_ == child)
        {
            this._colcheteD_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._colcheteE_ == oldChild)
        {
            setColcheteE((TColcheteE) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        for(ListIterator<PContExp> i = this._contExp_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PContExp) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._colcheteD_ == oldChild)
        {
            setColcheteD((TColcheteD) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
